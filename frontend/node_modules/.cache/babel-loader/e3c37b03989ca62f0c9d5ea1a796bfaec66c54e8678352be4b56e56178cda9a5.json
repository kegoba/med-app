{"ast":null,"code":"import React from \"react\";\nimport axios from \"axios\";\n//import { BASE_URL } from \"../asset/asset\"\n\nimport apiConfig from \"./axiosConfig\";\nexport const BASE_URL = \"http://localhost:8000/api/v1\";\nconst getToken = localStorage.getItem(\"token\");\nconst getHeaderConfig = {\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getToken}`\n  }\n};\nexport const getAllConsultation = async () => {\n  const apiData = await axios.get(BASE_URL + \"/getalluserconsultation\", {\n    header: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getToken}`\n    }\n  });\n  return apiData.data;\n};\nexport const getSingleConsulation = async data => {\n  const apiData = await axios.get(BASE_URL + \"/getsingleconsulation\", data, {\n    header: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${getToken}`\n    }\n  });\n  return apiData.data;\n};\nexport const createConsultation = async data => {\n  return await axios.post(BASE_URL + \"/createconsultation\", data, getHeaderConfig).then(resp => resp);\n};\nexport const registerUser = data => {\n  return axios.post(BASE_URL + \"/registeruser\", data, {\n    method: 'POST',\n    headers: {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  }).then(data => data);\n};\nexport const loginofficer = async data => {\n  const resp = await axios.post(BASE_URL + \"/loginuser\", data, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (resp.status === 200) {\n    localStorage.setItem(\"user\", JSON.stringify(resp.data.data));\n    localStorage.setItem(\"token\", resp.data.data.token);\n    return resp;\n  }\n  return null;\n};","map":{"version":3,"names":["React","axios","apiConfig","BASE_URL","getToken","localStorage","getItem","getHeaderConfig","headers","Authorization","getAllConsultation","apiData","get","header","data","getSingleConsulation","createConsultation","post","then","resp","registerUser","method","loginofficer","status","setItem","JSON","stringify","token"],"sources":["C:/Users/HP/med-app/frontend/src/features/services/userServices.js"],"sourcesContent":["import React from \"react\"\r\nimport axios from \"axios\"\r\n//import { BASE_URL } from \"../asset/asset\"\r\n\r\nimport apiConfig from \"./axiosConfig\"\r\n\r\n\r\nexport const BASE_URL = \"http://localhost:8000/api/v1\"\r\nconst getToken = localStorage.getItem(\"token\")  \r\n\r\nconst getHeaderConfig = {\r\n    headers: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${getToken}`,\r\n  }\r\n}\r\n\r\nexport const getAllConsultation  = async ()=> {\r\n  const apiData = await axios.get(BASE_URL + \"/getalluserconsultation\",\r\n  {header: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${getToken}`,\r\n  }}\r\n  ) \r\n \r\n\r\n  return apiData.data\r\n    \r\n}\r\n\r\n\r\n  export const getSingleConsulation  = async (data)=> {\r\n    const apiData = await axios.get(BASE_URL + \"/getsingleconsulation\",data,\r\n    {header: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${getToken}`,\r\n    }}\r\n    ) \r\n   \r\n\r\n    return apiData.data\r\n      \r\n  }\r\n  \r\n\r\n\r\n  export const createConsultation  = async (data)=> {\r\n  \r\n    return await axios.post(BASE_URL + \"/createconsultation\",\r\n      data,\r\n      getHeaderConfig,\r\n          )\r\n      .then(resp => resp)\r\n  }\r\n  \r\n      \r\n\r\n   export const registerUser  =  (data) => {\r\n   return axios.post(BASE_URL+\"/registeruser\",\r\n      data,{\r\n     method: 'POST',\r\n     headers: {\r\n        headers: {'Content-Type': 'application/json'},\r\n      },\r\n   })\r\n     .then(data => data)\r\n  }\r\n\r\n\r\n  export const loginofficer  = async (data) => {\r\n     const resp =  await axios.post(BASE_URL +\"/loginuser\", data,{\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      \r\n    })\r\n        if(resp.status ===200){\r\n            localStorage.setItem(\"user\", JSON.stringify(resp.data.data))\r\n            localStorage.setItem(\"token\", (resp.data.data.token))\r\n            return resp\r\n            \r\n           } \r\n           return null\r\n\r\n      \r\n      \r\n   }\r\n\r\n\r\n\r\n   "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAEA,OAAOC,SAAS,MAAM,eAAe;AAGrC,OAAO,MAAMC,QAAQ,GAAG,8BAA8B;AACtD,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAE9C,MAAMC,eAAe,GAAG;EACpBC,OAAO,EAAE;IACT,cAAc,EAAE,kBAAkB;IAClCC,aAAa,EAAG,UAASL,QAAS;EACpC;AACF,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAI,MAAAA,CAAA,KAAW;EAC5C,MAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACT,QAAQ,GAAG,yBAAyB,EACpE;IAACU,MAAM,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCJ,aAAa,EAAG,UAASL,QAAS;IACpC;EAAC,CACD,CAAC;EAGD,OAAOO,OAAO,CAACG,IAAI;AAErB,CAAC;AAGC,OAAO,MAAMC,oBAAoB,GAAI,MAAOD,IAAI,IAAI;EAClD,MAAMH,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACT,QAAQ,GAAG,uBAAuB,EAACW,IAAI,EACvE;IAACD,MAAM,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCJ,aAAa,EAAG,UAASL,QAAS;IACpC;EAAC,CACD,CAAC;EAGD,OAAOO,OAAO,CAACG,IAAI;AAErB,CAAC;AAID,OAAO,MAAME,kBAAkB,GAAI,MAAOF,IAAI,IAAI;EAEhD,OAAO,MAAMb,KAAK,CAACgB,IAAI,CAACd,QAAQ,GAAG,qBAAqB,EACtDW,IAAI,EACJP,eACI,CAAC,CACJW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC;AACvB,CAAC;AAIA,OAAO,MAAMC,YAAY,GAAMN,IAAI,IAAK;EACxC,OAAOb,KAAK,CAACgB,IAAI,CAACd,QAAQ,GAAC,eAAe,EACvCW,IAAI,EAAC;IACNO,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MACNA,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;IAC9C;EACH,CAAC,CAAC,CACCU,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAAC;AACtB,CAAC;AAGD,OAAO,MAAMQ,YAAY,GAAI,MAAOR,IAAI,IAAK;EAC1C,MAAMK,IAAI,GAAI,MAAMlB,KAAK,CAACgB,IAAI,CAACd,QAAQ,GAAE,YAAY,EAAEW,IAAI,EAAC;IAC3DO,MAAM,EAAE,MAAM;IACdb,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EAEF,CAAC,CAAC;EACE,IAAGW,IAAI,CAACI,MAAM,KAAI,GAAG,EAAC;IAClBlB,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAACL,IAAI,CAACA,IAAI,CAAC,CAAC;IAC5DT,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAGL,IAAI,CAACL,IAAI,CAACA,IAAI,CAACa,KAAM,CAAC;IACrD,OAAOR,IAAI;EAEZ;EACA,OAAO,IAAI;AAInB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}